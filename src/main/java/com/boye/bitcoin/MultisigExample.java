package com.boye.bitcoin;

import org.apache.commons.codec.DecoderException;
import org.bitcoinj.core.*;
import org.bitcoinj.params.TestNet3Params;
import org.bitcoinj.script.Script;
import org.bitcoinj.script.ScriptBuilder;
import org.bitcoinj.wallet.SendRequest;
import org.bitcoinj.wallet.UnreadableWalletException;
import org.bitcoinj.wallet.Wallet;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class MultisigExample {
    public static void main(String[] args) throws  IOException, UnreadableWalletException {
        TestNet3Params testNet3Params = TestNet3Params.get();
        File walletFile = new File("wallet1.wallet");
        Wallet wallet = null;
        if(!walletFile.exists()){
             wallet = new Wallet(testNet3Params);
        }else {
            wallet = Wallet.loadFromFile(walletFile);
        }

        Address currentReceiveAddress = wallet.currentReceiveAddress();
        System.out.println(currentReceiveAddress);
        wallet.saveToFile(walletFile);
        /*
        ECKey keyA = new ECKey();
        ECKey keyB = new ECKey();
        ECKey keyC = new ECKey();

        Transaction tx = new Transaction(testNet3Params);
        List<ECKey> keyList = Arrays.asList(keyA, keyB, keyC);


        Script script = ScriptBuilder.createMultiSigOutputScript(2, keyList); //2 of 3 multisig
        Coin value = Coin.valueOf(0,10); // 0.1 btc
        tx.addOutput(value, script);
        SendRequest request = SendRequest.forTx(tx);
        wallet.completeTx(request); // fill in coins
        */
    }
}
